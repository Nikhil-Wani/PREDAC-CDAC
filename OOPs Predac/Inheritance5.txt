/*
when we create child class object, child class constructor 
invokes default constructor of parent class.
if parent class does not have default constructor, we get 
compilation error.
in order to solve this problem there are two ways:
1) provide default constructor in parent class
2) invoke parameterized constructor of parent class from
child class constructor.
*/
#include<iostream>
using namespace std;
class Base
{
	private:
		int num1;
	public:
		void setNum1(int num1)
		{
			this->num1=num1;
		}
		int getNum1()
		{
			return num1;
		}
		Base(int num1)
		{
			this->num1=num1;
			cout<<"Base param constructor"<<endl;
		}
		~Base()
		{
			cout<<"in Base destructor"<<endl;
		}
		
};
class Sub:public Base
{
	private:
		int num2;
	public:
		void setNum2(int num2)
		{
			this->num2=num2;
		}
		int getNum2()
		{
			return num2;
		}
		Sub():Base(100)
		{
			cout<<"Subs default constructor"<<endl;
		}
		~Sub()
		{
			cout<<"in Sub destructor"<<endl;
		}
};
int main()
{
	Sub s;
	s.setNum1(100);
	s.setNum2(200);
	cout<<s.getNum1()<<"\t"<<s.getNum2()<<endl;
}