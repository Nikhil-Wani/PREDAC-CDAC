#include<iostream>
#include<string.h>
using namespace std;
class Student
{
private:
		int rollno;
		char name[20];
		int age;
		char qualification[30];
public:
	// constructor overloading
	Student(int rollno,char *name,int age,char *qualification)
	{
		this->rollno=rollno;
		strcpy(this->name,name);
		this->age=age;
		strcpy(this->qualification,qualification);
	}
	Student()
	{

	}	
	int getRollno()
	{
		return rollno;
	}
	void setRollno(int rollno)
	{
		this->rollno=rollno;
	}
	char* getName()
	{
		return name;
	}
	void setName(char *name)
	{
		strcpy(this->name,name);
	}
	int getAge()
	{
		return age;
	}
	void setAge(int age)
	{
		this->age=age;
	}
	char* getQualification()
	{
		return qualification;
	}
	void setQualification(char* qualification)
	{
		strcpy(this->qualification,qualification);
	}
};
int main()
{
	Student s1;  // default constructor
	
	s1.setRollno(1);
	s1.setName("Amit");
	s1.setAge(21);
	s1.setQualification("be");

	cout<<s1.getRollno()<<"\t"<<s1.getName()<<"\t"<<s1.getAge()<<"\t"<<s1.getQualification()<<endl;


	Student s2; // default constructor
	s2.setRollno(2);
	s2.setName("Vishal");
	s2.setAge(23);
	s2.setQualification("btech");

	cout<<s2.getRollno()<<"\t"<<s2.getName()<<"\t"<<s2.getAge()<<"\t"<<s2.getQualification()<<endl;

Student s3(3,"Suresh",22,"be");
	

	s3.setQualification("me");
	cout<<s3.getRollno()<<"\t"<<s3.getName()<<"\t"<<s3.getAge()<<"\t"<<s3.getQualification()<<endl;


	return 0;
}



when object goes out of scope what happens

a) destructor is called
b) instance members are destroyed.

what is destructor?

destructor is a special member function

special because
a) it has same name as of class, begins with a ~ sign
b) invoked automatically when object goes out of scope.

e.g. for a class "Student" destructor will look like:

~Student()
{

}

destructor does not have arguments, hence it can not be overloaded.
destructor is basically used to release the resources like file,database connection etc.
when u don't define destructor inside class, compiler provides it.

int main()
{

Student s1;
	
	s1.setRollno(1);
	s1.setName("Amit");
	s1.setAge(21);
	s1.setQualification("be");

	cout<<s1.getRollno()<<"\t"<<s1.getName()<<"\t"<<s1.getAge()<<"\t"<<s1.getQualification()<<endl;

}

in C++

object can be created on stack as well as on heap.

heap based objects are useful for late binding or dynamic polymorphism or runtime polymorphism.

heap based object can be created with the help of "new" operator.

e.g.
stack based object

	Student s1;

heap based object

	Student *s2=new Student;

destructor for heap based object does not get invoked implicitly, programmer has to invoke it explicitly using a keyword "delete".






















































































































